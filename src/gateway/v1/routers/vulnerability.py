from functools import lru_cache
import logging

from fastapi import APIRouter, Depends, status

from src.gateway.v1.models.filters import ScoreFilter, VulnerabilityFilter
from src.gateway.v1.models.responses import Vulnerability, AffectedSystem
from src.services.simulation.vulnerability_service import VulnerabilityService

logger = logging.getLogger()


@lru_cache
def vulnerability_service():
    return VulnerabilityService()

router = APIRouter(
    prefix="/vulnerability",
    tags=["vulnerability"],
)


@router.post("/")
async def read_vulnerabilities(
    skip: int = 0,
    limit: int = 100,
    vulnerability_filter: VulnerabilityFilter = VulnerabilityFilter(),
    service: VulnerabilityService = Depends(vulnerability_service),
) -> list[Vulnerability]:
    return service.query(vulnerability_filter=vulnerability_filter, limit=limit, skip=skip)

@router.get("/{cve}")
async def read_vulnerabilities(
    cve: str,
    service: VulnerabilityService = Depends(vulnerability_service),
) -> Vulnerability:
    return service.query_single(cve)


@router.get("/{cve}/systems")
async def read_affected_systems(
    cve: str,
    service: VulnerabilityService = Depends(vulnerability_service),
) -> list[AffectedSystem]:
    return service.find_affected_systems(cve)